use anyhow::{anyhow, Result};
use clap::Parser;
use std::{collections::HashMap, sync::Mutex};

use num_bigint::BigUint;
use tonic::{transport::Server, Code, Request, Response, Status};

use zkp_chaum_pedersen::ZKP;

pub mod zkp_auth {
    include!("./zkp_auth.rs");
}

use zkp_auth::{
    auth_server::{Auth, AuthServer},
    AuthenticationAnswerRequest, AuthenticationAnswerResponse, AuthenticationChallengeRequest,
    AuthenticationChallengeResponse, RegisterRequest, RegisterResponse,
};

#[derive(Debug, Parser)]
#[command(author, version, about, long_about = None)]
/// Chaum-Pedersen Zero Knowledge Proof (server)
struct Args {
    /// Server listening endpoint
    #[arg(short, long, required = false, default_value = "127.0.0.1:50051")]
    endpoint: String,
}

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::parse();
    let addr = args.endpoint.clone();

    println!("✅ Server listening at {}", addr);

    let addr = match addr.parse() {
        Ok(a) => a,
        Err(e) => {
            return Err(anyhow!("could not convert address:{} error:{:?}", addr, e));
        }
    };

    match Server::builder()
        .add_service(AuthServer::new(AuthImpl::default()))
        .serve(addr)
        .await
    {
        Ok(x) => x,
        Err(e) => {
            return Err(anyhow!("Server create failed endpoint:{} error:{:?}", args.endpoint, e));
        }
    };

    Ok(())
}

/// An implementation of the `Auth` trait for handling user registration, authentication challenge creation, 
/// and verification in the Chaum-Pedersen Zero Knowledge Proof (ZKP) protocol.
///
/// `AuthImpl` manages two key data structures that are protected by mutexes for concurrent access:
///
/// - `user_info`: A `Mutex`-protected `HashMap` that stores user registration and authentication details,
///   with the username as the key and the associated `UserInfo` as the value. It holds the ZKP data for each user.
///
/// - `auth_id_to_user`: A `Mutex`-protected `HashMap` that maps an authentication ID (generated during 
///   challenge creation) to the corresponding username. This is used to match a challenge response with the correct user.
///
/// This struct is the main server-side component responsible for processing requests for registration, 
/// challenge creation, and authentication verification in the ZKP protocol.
#[derive(Debug, Default)]
pub struct AuthImpl {
    pub user_info: Mutex<HashMap<String, UserInfo>>,
    pub auth_id_to_user: Mutex<HashMap<String, String>>,
}

/// A struct representing the information needed for the authentication and verification process
/// using the Chaum-Pedersen Zero Knowledge Proof (ZKP) protocol.
///
/// `UserInfo` contains data for registration, authorization, and verification steps, including:
///
/// - **Registration**:
///   - `user_name`: The username of the user.
///   - `y1`, `y2`: The values used for registration, representing the user's computed public keys.
///
/// - **Authorization**:
///   - `r1`, `r2`: The values sent by the user during the authentication challenge, computed as part of the ZKP protocol.
///
/// - **Verification**:
///   - `c`: The challenge value generated by the server during the authentication process.
///   - `s`: The solution provided by the user to prove they know the correct password.
///   - `session_id`: A unique identifier for the authenticated session, generated after successful verification.
#[derive(Debug, Default)]
pub struct UserInfo {
    //
    // registration
    pub user_name: String,
    pub y1: BigUint,
    pub y2: BigUint,
    //
    // authorization
    pub r1: BigUint,
    pub r2: BigUint,
    //
    // verification
    pub c: BigUint,
    pub s: BigUint,
    pub session_id: String,
}

#[tonic::async_trait]
impl Auth for AuthImpl {
    /// Registers a new user by storing their information in the `user_info` hashmap.
    ///
    /// This method takes a `RegisterRequest` containing the user's name and two big integers
    /// (y1 and y2) that are part of the Chaum-Pedersen ZKP protocol. If registration is successful,
    /// it logs a success message and returns an empty `RegisterResponse`.
    ///
    /// # Arguments
    ///
    /// * `request` - A `Request<RegisterRequest>` containing the user's registration details.
    ///
    /// # Returns
    ///
    /// A `Result` containing either a `Response<RegisterResponse>` on success or a `Status` error.
    async fn register(
        &self, request: Request<RegisterRequest>,
    ) -> Result<Response<RegisterResponse>, Status> {
        let request = request.into_inner();

        let user_name = request.user;
        println!("Processing Registration username: {:?}", user_name);

        let user_info = UserInfo {
            user_name: user_name.clone(),
            y1: BigUint::from_bytes_be(&request.y1),
            y2: BigUint::from_bytes_be(&request.y2),
            ..Default::default()
        };

        {
            let user_info_hashmap = &mut self.user_info.lock().unwrap();
            user_info_hashmap.insert(user_name.clone(), user_info);
        }

        println!("✅ Successful Registration username: {:?}", user_name);
        Ok(Response::new(RegisterResponse {}))
    }

    /// Creates an authentication challenge for a registered user.
    ///
    /// This method generates a random challenge value and an authentication ID for the user specified
    /// in the `AuthenticationChallengeRequest`. It updates the user's information with the received
    /// values and logs a success message upon completion.
    ///
    /// # Arguments
    ///
    /// * `request` - A `Request<AuthenticationChallengeRequest>` containing the user's name and 
    ///               the values r1 and r2 for the challenge.
    ///
    /// # Returns
    ///
    /// A `Result` containing either a `Response<AuthenticationChallengeResponse>` with the challenge details 
    /// or a `Status` error if the user is not found.
    async fn create_authentication_challenge(
        &self, request: Request<AuthenticationChallengeRequest>,
    ) -> Result<Response<AuthenticationChallengeResponse>, Status> {
        let request = request.into_inner();

        let user_name = request.user;
        println!("Processing Challenge Request username: {:?}", user_name);

        let user_info_hashmap = &mut self.user_info.lock().unwrap();

        if let Some(user_info) = user_info_hashmap.get_mut(&user_name) {
            let (_, _, _, q) = ZKP::get_constants();
            let c = ZKP::generate_random_number_below(&q);
            let auth_id = ZKP::generate_random_string(12);

            user_info.c.clone_from(&c);
            user_info.r1 = BigUint::from_bytes_be(&request.r1);
            user_info.r2 = BigUint::from_bytes_be(&request.r2);

            let auth_id_to_user = &mut self.auth_id_to_user.lock().unwrap();
            auth_id_to_user.insert(auth_id.clone(), user_name.clone());

            println!("✅ Successful Challenge Request username: {:?}", user_name);

            Ok(Response::new(AuthenticationChallengeResponse {
                auth_id,
                c: c.to_bytes_be(),
            }))
        } else {
            Err(Status::new(
                Code::NotFound,
                format!("User: {} not found in database", user_name),
            ))
        }
    }

    /// Verifies the solution to an authentication challenge.
    ///
    /// This method checks the provided solution against the stored user information using the 
    /// ZKP verification process. If successful, it generates a session ID and returns it in the 
    /// `AuthenticationAnswerResponse`. If the verification fails, an error status is returned.
    ///
    /// # Arguments
    ///
    /// * `request` - A `Request<AuthenticationAnswerRequest>` containing the authentication ID and the solution.
    ///
    /// # Returns
    ///
    /// A `Result` containing either a `Response<AuthenticationAnswerResponse>` with the session ID 
    /// or a `Status` error if the authentication ID is not found or the solution is incorrect.
     async fn verify_authentication(
        &self, request: Request<AuthenticationAnswerRequest>,
    ) -> Result<Response<AuthenticationAnswerResponse>, Status> {
        let request = request.into_inner();

        let auth_id = request.auth_id;
        println!("Processing Challenge Solution auth_id: {:?}", auth_id);

        let auth_id_to_user_hashmap = &mut self.auth_id_to_user.lock().unwrap();

        if let Some(user_name) = auth_id_to_user_hashmap.get(&auth_id) {
            let user_info_hashmap = &mut self.user_info.lock().unwrap();
            let user_info = user_info_hashmap.get_mut(user_name).ok_or_else(|| {
                Status::new(Code::NotFound, format!("AuthId {} not found in database", auth_id))
            })?;

            let s = BigUint::from_bytes_be(&request.s);
            user_info.s = s;

            let (alpha, beta, p, q) = ZKP::get_constants();
            let zkp = ZKP { alpha, beta, p, q };

            let verification = zkp.verify(
                &user_info.r1,
                &user_info.r2,
                &user_info.y1,
                &user_info.y2,
                &user_info.c,
                &user_info.s,
            );

            if verification {
                let session_id = ZKP::generate_random_string(12);

                println!("✅ Correct Challenge Solution username: {:?}", user_name);

                Ok(Response::new(AuthenticationAnswerResponse { session_id }))
            } else {
                println!("❌ Wrong Challenge Solution username: {:?}", user_name);

                Err(Status::new(
                    Code::PermissionDenied,
                    format!("AuthId: {} bad solution to the challenge", auth_id),
                ))
            }
        } else {
            Err(Status::new(
                Code::NotFound,
                format!("AuthId: {} not found in database", auth_id),
            ))
        }
    }
}
